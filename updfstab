#!/bin/sh
# name: /etc/dev.d/default/updfstab.dev
# purpose: automatic handling of /etc/fstab for usb_storage devices under kernel 2.6 with udev
# This script is automatically called by hotplug at each plug/unplug event of an usb device.
# It adds a line in /etc/fstab for each usb_storage device found,
# with a pretty name as mountpoint. (based on label or info read from /sys)
##################################################################
# Copyright (C) 2004 Christophe Combelles (ccomb@free.fr)
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
##################################################################
LOCKFILE=/var/lock/updfstab.lock
terminate() { rm -f $LOCKFILE; exit; }
if [ -e $LOCKFILE ]; then exit; fi
touch $LOCKFILE

# be sure the drivers are loaded
modprobe usb_storage vfat

# create the FSH required /media directory
# Please read: http://www.pathname.com/fhs/pub/fhs-2.3.html#MEDIAMOUNTPOINT
if [ ! -d /media ]; then mkdir /media; fi

# First remove all updfstab-managed devices from fstab
# existing but removed entries are just added again later
# mount points are not removed (unuseful)
grep -v \#updfstab /etc/fstab > /etc/fstab.updated
if diff /etc/fstab /etc/fstab.updated >/dev/null 2>&1; then
  rm /etc/fstab.updated
else
  if [ -s /etc/fstab.updated ]; then
    cat /etc/fstab.updated > /etc/fstab
  fi
  rm /etc/fstab.updated
fi

# wait a few seconds until something appears
timeout=20 # timeout in tenths of second for giving up
while true; do
  # list devices
  list="`ls /sys/bus/usb/drivers/usb-storage`"
  if test "$list"; then break; fi
  sleep 0.1
  timeout=$((${timeout}-1))
  if [ $timeout -eq 0 ]; then terminate; fi
done

for i in $list; do
  j="`printf $i | sed 's/:.*//g'`" # exemple : $i="3-2:1.0" -> we extract $j="3-2"
  # for each device, get infos
  host="`ls -1 /sys/bus/usb/drivers/usb-storage/$i | grep host`" # used to find the /dev entry
  manufacturer="`cat /sys/bus/usb/devices/$j/manufacturer | sed 's/[ \/]//g'`" # used to chose a mountpoint
  product="`cat /sys/bus/usb/devices/$j/product | sed 's/[ \/]//g'`" # used to chose a mountpoint
  #serial="`cat /sys/bus/usb/devices/$j/serial`" # could be used to create a udev rule
  # find partitions
  partitions=`find /dev/scsi/${host} -type b -name "part*" -print`
  
  # for each partition, create a mountpoint and an fstab entry
  for p in ${partitions}; do
    # get the partition label
    label="`file -s $p | grep "label:" | sed 's/.*label:\ *"//; s/".*//; s/[ \/]//g'`"
    # build a mountpoint name: label else product, else manufacturer, else usb-disk
    if [ ! -z "${label}" ]; then mpname="${label}"
    else if [ ! -z "${product}" ]; then mpname="${product}"
      else if [ ! -z "${manufacturer}" ]; then mpname="${manufacturer}"
        else mpname=usb-disk
        fi
      fi
    fi
    if [ `echo ${partitions}|wc -w` -eq 1 ]; then
      mntpoint="/media/${mpname}" # if only one partition
    else
      mntpoint="/media/${mpname}-`basename $p`" # if several partitions
    fi
    # if the mount point is used for another device, append a number
    count=1
    while grep $mntpoint /etc/fstab; do
      let count++
      mntpoint=`printf ${mntpoint}-${count}`
    done
    # create the mountpoint and the fstab entry
      if [ ! -d "${mntpoint}" ]; then mkdir ${mntpoint}; fi
      echo "$p $mntpoint auto sync,user,noauto,rw,iocharset=utf8 0 0 #updfstab" >> /etc/fstab
  done
done
terminate

